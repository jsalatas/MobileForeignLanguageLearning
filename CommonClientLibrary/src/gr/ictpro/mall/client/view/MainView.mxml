<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="gr.ictpro.mall.client.components.*"
		 xmlns:signals="org.osflash.signals.*"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" height="100%" currentState="default"
		 creationComplete="group1_creationCompleteHandler(event)" xmlns:s1="library://ns.adobe.com/flex/spark">
	<s:states>
		<mx:State name="default"/>
		<mx:State name="menu"/>
	</s:states>
	<s:transitions>
		<s:Transition fromState="*" toState="*">
			<s:Move duration="100" target="{mainMenu}"/>
		</s:Transition>
	</s:transitions>
	<fx:Declarations>
		<signals:Signal id="menuClicked"/>
		<signals:Signal id="classroomChanged"/>
		<signals:Signal id="notificationClicked"/>
		<signals:Signal id="notificationOkClicked"/>
		<signals:Signal id="switchAvailabilityClicked"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.core.IVisualElementContainer;
			import mx.events.FlexEvent;
			
			import gr.ictpro.mall.client.model.vo.Classroom;
			import gr.ictpro.mall.client.model.vo.Notification;
			import gr.ictpro.mall.client.model.vo.User;
			import gr.ictpro.mall.client.runtime.Device;
			
			[Bindable]
			public var user:User;

			[Bindable]
			public var menu:ArrayList;
			

			[Bindable]
			public var notifications:ArrayCollection;
			
			public function dispose():void
			{
				if(parent && parent.contains(this))
					IVisualElementContainer(parent).removeElement(this);
			}

			protected function showMenu(event:MouseEvent):void
			{
				if(currentState == "default") {
					currentState = "menu";
				} else {
					currentState = "default";
				}
				
			}
			
			protected function mainMenu_changeHandler(event:Event):void
			{
				currentState="default";
				menuClicked.dispatch(mainMenu.selectedItem);

			}
			
			protected function notificationsList_changeHandler(event:MouseEvent):void
			{
				if(event.currentTarget.selectedItem != null) {
					var notification:Notification = event.currentTarget.selectedItem;
					notificationClicked.dispatch(notification);
				}
			}
			
			protected function notification_okClicked(event:MouseEvent):void
			{
				notificationOkClicked.dispatch(notificationsList.selectedItem);
			}
			
			[Bindable]
			private var _classroom:Classroom;

			[Bindable]
			private var _classrooms:ArrayCollection;
			

			public function set classroom(classroom:Classroom):void
			{
				this._classroom = classroom;	
			}

			public function get classroom():Classroom
			{
				return this._classroom
			}

			public function set classrooms(classrooms:ArrayCollection):void
			{
				this._classrooms = classrooms;
			}
			
			public function get classrooms():ArrayCollection
			{
				return this._classrooms;
			}

			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				notificationsList.addEventListener("okClicked", notification_okClicked);
				
			}
			
			protected function currentClassroom_changeHandler(event:Event):void
			{
				classroomChanged.dispatch();
				
			}
			
			protected function switchAvailability(event:MouseEvent):void
			{
				event.stopImmediatePropagation();
				switchAvailabilityClicked.dispatch();
			}
			
		]]>
	</fx:Script>
	<s:Group  width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout gap="5" />
		</s:layout>		
		<s:Group id="topBar" top="0" width="100%" height="30">
			<s:Rect width="100%" height="100%">
				<s:fill><s:SolidColor color="{Device.getDefaultColor(0.67)}"/></s:fill>
			</s:Rect>
			<s:Group id="menuSwitcher" left="0" right="0" top="0" bottom="0" click="showMenu(event)">
				<s:layout>
					<s:HorizontalLayout gap="10" paddingLeft="5" paddingRight="5" verticalAlign="middle"/>
				</s:layout>
				<s:Image width="21" height="25" source="{user.profile.image.source}"/>
				<s:Label id="username" color="0xFFFFFF" fontSize="{Device.isAndroid?14:16}" fontWeight="normal" text="{user.profile == null?user.username:user.profile.name}" width="100%"/>
				<s:Group right="5" width="15" height="15" click="switchAvailability(event)">
					<s1:Ellipse height="100%" width="100%" >
						<s1:stroke>
							<s:SolidColorStroke color="0xffffff" weight="2" alpha="0.7"/>
						</s1:stroke>
						<s1:fill>
							<s:SolidColor color="{user.available?0x00ff00:0xff0000}" />
						</s1:fill>
					</s1:Ellipse>
				</s:Group>	
					
			</s:Group>
		</s:Group>
		<s:Group width="100%" height="100%">
			<s:List id="notificationsList" itemRenderer="gr.ictpro.mall.client.components.renderers.ServerNotificationRenderer" dataProvider="{notifications}" borderAlpha="0"
					contentBackgroundColor="0xffffff" click="notificationsList_changeHandler(event)" width="100%" height="100%" />
		</s:Group>
		<s:Group width="100%">
			<s:layout>
				<s:FormLayout />
			</s:layout>
			<s:FormItem id="currentClassroomFormItem" width="100%" label="{Device.translations.getTranslation('Classroom')}">
				<s:PopUpList width="100%" id="currentClassroom" dataList="{_classrooms}" selected="{_classroom}" change="currentClassroom_changeHandler(event)"/> 
			</s:FormItem>
		</s:Group>
	</s:Group>
	<s:Menu id="mainMenu" top="{topBar.definedHeight}" bottom="0" width="200"
			change="mainMenu_changeHandler(event)" menuList="{menu}"
			x.default="{-mainMenu.width}"
			x.menu="0"/>
</s:Group>
