<?xml version="1.0" encoding="utf-8"?>
<s:Image xmlns:fx="http://ns.adobe.com/mxml/2009" 
				  xmlns:s="gr.ictpro.mall.client.components.*" xmlns:mx="library://ns.adobe.com/flex/mx"
				  click.edit="choosePhotoHandler(event)">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			
			import spark.events.PopUpEvent;
			
			import gr.ictpro.mall.client.Icons;
			import gr.ictpro.mall.client.components.menu.MenuItemCommand;
			import gr.ictpro.mall.client.runtime.Device;
			import gr.ictpro.mall.client.utils.image.ImageTransform;
			import gr.ictpro.mall.client.view.ImageCropperView;
			
			import jp.shichiseki.exif.ExifInfo;
			import jp.shichiseki.exif.ExifLoader;
			import jp.shichiseki.exif.IFD;

			private var photoUrl:String = "";
			private var bitmap:Bitmap = null; 
			
			private function choosePhotoHandler(event:MouseEvent):void
			{
				var popup:PopUpMenu = new PopUpMenu();
				popup.menuList = getPhotoOptions();
				
				var curDensity:Number = FlexGlobals.topLevelApplication.runtimeDPI; 
				var curAppDPI:Number = FlexGlobals.topLevelApplication.applicationDPI; 
				
				popup.x = event.stageX *curAppDPI/curDensity;
				popup.y = event.stageY *curAppDPI/curDensity;
				popup.percentWidth = 100;
				popup.itemSelected.add(popUpAction);
				popup.addEventListener(PopUpEvent.CLOSE, popUpClose);
				popup.open(this, false);
				
			}
			
			private function popUpAction(selected:MenuItemCommand):void
			{
				selected.execute();
			}

			private function popUpClose(event:PopUpEvent):void
			{
				photoUrl = "";
				bitmap = null;
				(event.currentTarget as PopUpMenu).itemSelected.removeAll();
			}
			

			private function getPhotoOptions():ArrayCollection
			{
				var res:ArrayCollection = new ArrayCollection();
				if(CameraRoll.supportsBrowseForImage) {
					res.addItem(new MenuItemCommand(Device.tranlations.getTranslation("Choose Photo"), Icons.icon_folder, openGallery));
				}
				
				if(CameraUI.isSupported) {
					res.addItem(new MenuItemCommand(Device.tranlations.getTranslation("Take New Photo"), Icons.icon_camera, capturePhoto));
				}
				
				if(res.length == 0) {
					// We assume that ther application is running on the desktop. 
					// Show the open file dialog in order to select photo from disk
					res.addItem(new MenuItemCommand(Device.tranlations.getTranslation("Choose Photo"), Icons.icon_folder, chooseFile));
				}
				
				return res;
			}

			private function openGallery():void
			{
				var cameraRoll:CameraRoll = new CameraRoll();
				cameraRoll.addEventListener(MediaEvent.SELECT, cameraPhotoHandler);
				cameraRoll.addEventListener(Event.CANCEL, onCancel);
				cameraRoll.addEventListener(ErrorEvent.ERROR, onError);
				cameraRoll.browseForImage();
			}
			
			private function cameraPhotoHandler(event:MediaEvent):void {
				var promise:MediaPromise = event.data as MediaPromise;
				photoUrl = promise.file.url;
				var loader:Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onImageLoaded);
				loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,onError);
				loader.loadFilePromise(promise);
			}
			
			private function chooseFile():void
			{
				var file:File = File.documentsDirectory;
				file.addEventListener(Event.SELECT, fileSelectHandler); 
				var imgFilter:FileFilter = new FileFilter("Image", "*.jpg;*.png");
				file.browseForOpen("Choose photo", [imgFilter]);
			}
			
			private function fileSelectHandler(event:Event):void
			{
				var loader:Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onImageLoaded);
				loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,onError);
				photoUrl = (event.target as File).nativePath;
				loader.load(new URLRequest((event.target as File).nativePath));
			}
			
			private function onImageLoaded(event:Event):void {
				bitmap = event.currentTarget.content as Bitmap;
				getExif();
			}
			
			private function getExif():void
			{
				var loader:ExifLoader = new ExifLoader();
				loader.addEventListener(Event.COMPLETE, onExifLoaded);
				loader.load(new URLRequest(photoUrl));
			}
			
			private function onExifLoaded(event:Event):void
			{
				var orientation:int = getOrientation((event.currentTarget as ExifLoader).exif);
				var bitmapData:BitmapData = ImageTransform.transform(bitmap.bitmapData, orientation);
				
				var imageCropperView:ImageCropperView = new ImageCropperView();
				imageCropperView.ok.add(applyCropHandler);
				Device.shellView.addElement(imageCropperView);
				imageCropperView.image = bitmapData;
			
			}
			
			private function applyCropHandler(croppedImage:BitmapData):void {

				source = croppedImage;
			}

			private function getOrientation(exifInfo:ExifInfo):int
			{
				if(exifInfo == null || exifInfo.ifds == null) 
					return -1;
				
				var exifData:Object = new Object;
				this.iterateTags(exifInfo.ifds.primary, exifData);
				this.iterateTags(exifInfo.ifds.exif, exifData);
				this.iterateTags(exifInfo.ifds.gps, exifData);
				this.iterateTags(exifInfo.ifds.interoperability, exifData);
				this.iterateTags(exifInfo.ifds.thumbnail, exifData);
				
				if(exifData.hasOwnProperty("Orientation")) {
					return exifData.Orientation;
				}
				return -1;
			}
			
			private function iterateTags(ifd:IFD, exifData:Object):void
			{
				if (!ifd) return;
				for (var entry:String in ifd)
				{
					if (entry == "MakerNote") continue;
					exifData[entry] = ifd[entry];
				}
			}
			
			private function capturePhoto():void
			{
				var cameraUI:CameraUI = new CameraUI();
				cameraUI.launch(MediaType.IMAGE);
				cameraUI.addEventListener(MediaEvent.COMPLETE, cameraPhotoHandler);
				cameraUI.addEventListener(Event.CANCEL, onCancel);
				cameraUI.addEventListener(ErrorEvent.ERROR, onError);
			}

			private function onCancel(event:Event):void {
				trace("user left the Gallery", event.type);
			}
			
			private function onError(event:Event):void {
				trace("Gallery error", event.type);
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:states>
		<mx:State name="edit"/>
		<mx:State name="view"/>
	</s:states>
</s:Image>
