<?xml version="1.0" encoding="utf-8"?>
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="gr.ictpro.mall.client.components.*" xmlns:signals="org.osflash.signals.*"
		  creationComplete="skinnablepopupcontainer1_creationCompleteHandler(event)" addedToStage="skinnablepopupcontainer1_addedToStageHandler(event)" resize="skinnablepopupcontainer1_resizeHandler(event)">
	<fx:Declarations>
		<signals:Signal id="colorPickedSignal" valueClasses="{[int]}" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			import mx.events.ResizeEvent;
			
			import gr.ictpro.mall.client.runtime.Device;
			
			private var _data:ArrayCollection = null;
			
			public function set data(data:ArrayCollection):void
			{
				_data = data;
				addColors();
			}
			
			private function addColors():void {
				if(_data!=null && colorContainer != null) {
					for each (var color:uint in _data) {
						var colorRect:Rect = new Rect();
						colorRect.percentWidth=100;
						colorRect.percentHeight=100;
						colorRect.fill = new SolidColor(color);
						var colorGroup:Group = new Group();
						colorGroup.width=20;
						colorGroup.height=20;
						colorGroup.id ="color_"+color;
						colorGroup.addEventListener(MouseEvent.CLICK, colorClicked);
						colorGroup.addElement(colorRect);
						colorContainer.addElement(colorGroup);
					}
				}
			}
			
			private function align():void {
				var point:Point = owner.localToGlobal(new Point(owner.width, owner.height));
				var curDensity:Number = FlexGlobals.topLevelApplication.runtimeDPI; 
				var curAppDPI:Number = FlexGlobals.topLevelApplication.applicationDPI; 

				if(_data!=null && stage != null) {
					if(this.y+this.height > Device.shellView.height) {
						this.y = (point.y-this.height)*curAppDPI/curDensity; 
					}

					if(this.x+this.width > Device.shellView.width) {
						this.x = (point.x-this.width)*curAppDPI/curDensity; 
					}
				
					
				}
			}
			
			private function colorClicked(e:MouseEvent):void {
				trace(e.currentTarget.id);
				var picked:uint=parseInt(e.currentTarget.id.substring(6));
				colorPickedSignal.dispatch(picked);
				close();
			}
			
			override public function close(commit:Boolean=false, data:*=null):void
			{
				super.close(commit, data);
				this.colorPickedSignal.removeAll();
				stage.removeEventListener(Event.RESIZE, resizeHandler);

			}
			
			private function resizeHandler(e:Event):void
			{
				close();
			}
			
			protected function skinnablepopupcontainer1_creationCompleteHandler(event:FlexEvent):void
			{
				this.addEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE, clickOutside);
				addColors();
			}
			
			private function clickOutside(e:FlexMouseEvent):void {
				close();
			}
			
			protected function skinnablepopupcontainer1_addedToStageHandler(event:Event):void
			{
				stage.addEventListener(Event.RESIZE, resizeHandler);
			}
			
			protected function skinnablepopupcontainer1_resizeHandler(event:ResizeEvent):void
			{
				align();	
			}
			
		]]>
	</fx:Script>
	<s:Rect top="0" left="0" bottom="0" right="0">
		<s:fill>
			<s:SolidColor color="0xffffff" />
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke weight="{Device.getScaledSize(1)}" color="{Device.getDefaultColor()}" />
		</s:stroke>
	</s:Rect>

	<s:Group width="100%" height="100%">
		
		<s:layout>
			<s:VerticalLayout paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10" gap="10"/>
		</s:layout>
		<s:Label text="{Device.translations.getTranslation('Select Color')}" />
		<s:Group id="colorContainer" >
			<s:layout>
				<s:TileLayout />
			</s:layout>
		</s:Group>
	</s:Group>
	
</s:SkinnablePopUpContainer>
