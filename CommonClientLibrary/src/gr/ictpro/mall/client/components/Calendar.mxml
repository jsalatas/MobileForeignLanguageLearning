<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
				  xmlns:s="gr.ictpro.mall.client.components.*" width="100%" height="100%" xmlns:layout="org.osmf.layout.*"
				  creationComplete="group1_creationCompleteHandler(event)" >
	<fx:Metadata>
		[Event(name="dateSelected", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import gr.ictpro.mall.client.runtime.Device;
			import gr.ictpro.mall.client.utils.date.DateUtils;

			private var currentMonth:int;
			
			public var _daySummaries:Object;
			
			public function set daySummaries(daySummaries:Object):void
			{
				_daySummaries = daySummaries;
				if(_selectedDate != null) {
					drawCalendar();
				}
			}
			
			private var currentYear:int;
			
			private var _selectedDate:Date;
			
			public function get selectedDate():Date
			{
				return _selectedDate;
			}
			
			public function set selectedDate(selectedDate:Date):void 
			{
				_selectedDate = selectedDate;
				currentMonth = _selectedDate.month;
				currentYear = _selectedDate.fullYear;
				
				drawCalendar();
			}

			private var calendarCells:ArrayList = new ArrayList();

			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				if(_selectedDate == null) {
					_selectedDate = new Date();
					//trace("new date..............");
				}
				currentMonth = _selectedDate.month;
				currentYear = _selectedDate.fullYear;
				
				drawCalendar();
			}

			private function drawCalendar():void
			{
				calendarCells.removeAll();
				
				month.text = DateUtils.monthNames.getItemAt(currentMonth) + " " + currentYear;
				calendar.removeAllElements();
				var cellWidth:int = Math.min((calendarContainer.definedWidth -20) / 7, (calendarContainer.definedHeight -50) /7);
				if(cellWidth <30) {
					cellWidth = 30;
				}
				
				calendar.addElement(getHeader(cellWidth));
				calendar.addElement(getDates(cellWidth));
				
			}
			
			private function getHeader(cellWidth:int):Group
			{
				var group:Group = getRow(cellWidth);
				
				for(var i:int=0; i<7;i++) {
					var cell:CalendarCell = getCell(cellWidth);
					cell.borderColor = 0xffffff;
					cell.label.text = String(DateUtils.shortDayNames.getItemAt(i));
					cell.label.setStyle("fontWeight", "bold");
					group.addElement(cell);
				}
				
				return group;
			}
			
			private function getCell(cellWidth:int, date:Date = null):CalendarCell
			{
				var cell:CalendarCell = new CalendarCell();
				var color:int = 0xffffff;
				var fontColor:int = Device.getDefaultColor();
				if(_daySummaries != null && _daySummaries.hasOwnProperty(date)) {
					color = Device.getDefaultColor(_daySummaries[date]/10);
					if(_daySummaries[date] >=5) {
						fontColor = 0xffffff;
					}
					cell.color = color;
					cell.fontColor = fontColor;
				}
				cell.width = cellWidth;
				cell.height = cellWidth;
				cell.label.setStyle("textAlign", "center");
				cell.date = date;
				cell.cellClicked.add(dateClicked);
				calendarCells.addItem(cell);
				return cell;
			}
			
			private function getDates(cellWidth:int):Group
			{
				var group:Group = new Group();
				var layout:VerticalLayout = new VerticalLayout();
				layout.gap = -1;
				group.layout = layout;
				
				// calculate date of first Sunday
				var startDate:Date = new Date(currentYear, currentMonth, 1);
				startDate.date -= startDate.day;
				
				var rowGroup:Group = getRow(cellWidth);
				
				var showMore:Boolean = true; 
				while(showMore) {
					var cell:CalendarCell = getCell(cellWidth, new Date(startDate.fullYear, startDate.month, startDate.date));
					if(DateUtils.compareNoTime(cell.date, _selectedDate) == 0) {
						cell.label.setStyle("fontWeight", "bold");
					}
					cell.label.text = String(startDate.date);
					if(startDate.month != currentMonth) {
						cell.alpha = 0.5;
					}
					rowGroup.addElement(cell);
					
					startDate.date +=1;
					if(startDate.day == 0) {
						group.addElement(rowGroup);
						if(startDate.fullYear > currentYear || startDate.month > currentMonth) {
							showMore = false;
						} else {
							rowGroup = getRow(cellWidth);							
						}
					}
				}
				
				return group;
			}
			
			private function getRow(cellWidth:int):Group
			{
				var group:Group = new Group();
				var layout:HorizontalLayout = new HorizontalLayout();
				layout.gap = -1;
				group.layout = layout;
				
				return group;
			}
			
			private function dateClicked(cell:CalendarCell):void
			{
				this.selectedDate = cell.date;
				dispatchEvent(new Event('dateSelected'));
			}
			
			protected function scroller_resizeHandler(event:ResizeEvent):void
			{
				if(!Device.isAndroid || (Device.isAndroid && this.height == stage.height && this.width == stage.width)) { // don't resize if softKeyboard is visible
					var cellWidth:int = Math.min((calendarContainer.definedWidth -20) / 7, (calendarContainer.definedHeight -20) /7);
					if(cellWidth <20) {
						cellWidth = 20;
					}
					for (var i:int = 0; i<calendarCells.length; i++) {
						var cell:CalendarCell = CalendarCell(calendarCells.getItemAt(i));
						cell.width = cellWidth;
						cell.height = cellWidth;
					}
				}
			}


			protected function leftClickHandler(event:MouseEvent):void
			{
				currentMonth--;
				if(currentMonth<0) {
					currentMonth = 11;
					currentYear--;
				}
				drawCalendar();
			}
			
			protected function rightClickHandler(event:MouseEvent):void
			{
				currentMonth++;
				if(currentMonth>11) {
					currentMonth = 0;
					currentYear++;
				}
				drawCalendar();
			}
			
		]]>
	</fx:Script>
	<s:layout>
		<s:VerticalLayout gap="5" paddingLeft="5" paddingTop="5" paddingBottom="5" paddingRight="5" horizontalAlign="center"/>
	</s:layout>	
	<s:Group width="150" height="24">
		<s:layout>
			<s:HorizontalLayout gap="5" verticalAlign="middle" />
		</s:layout>	
		<s:Group width="10" height="20" click="leftClickHandler(event)">
			<s:Path width="100%" height="100%" data="M 0 10 L -10 0 L 0 -10 z" verticalCenter="0">
				<s:fill>
					<s:SolidColor color="{Device.getDefaultColor()}" />
				</s:fill>
			</s:Path>
		</s:Group>
		<s:Label id="month" width="100%" height="100%" textAlign="center" verticalAlign="middle"/>
		<s:Group width="10" height="20" click="rightClickHandler(event)">
			<s:Path width="100%" height="100%" data="M 0 10 L 10 0 L 0 -10 z" verticalCenter="0">
				<s:fill>
					<s:SolidColor color="{Device.getDefaultColor()}" />
				</s:fill>
			</s:Path>
		</s:Group>
	</s:Group>	
	<s:Scroller width="100%" height="100%" resize="scroller_resizeHandler(event)">
		<s:Group id="calendarContainer" minWidth="210" minHeight="210" >
			<s:Group id="calendar" horizontalCenter="0" >
				<s:layout>
					<s:VerticalLayout />
				</s:layout>
			</s:Group> 
		</s:Group>
	</s:Scroller>
</s:Group>
