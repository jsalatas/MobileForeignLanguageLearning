<?xml version="1.0" encoding="utf-8"?>
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
									xmlns:s="gr.ictpro.mall.client.components.*" xmlns:fxg="assets.fxg.*"
									creationComplete="skinnablepopupcontainer1_creationCompleteHandler(event)" backgroundColor="#ffffff"
									show="skinnablepopupcontainer1_showHandler(event)"
									keyDown="skinnablepopupcontainer1_keyDownHandler(event)"
									>
	<fx:Script>
		<![CDATA[
			import mx.core.IVisualElementContainer;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import spark.components.supportClasses.Skin;
			
			import gr.ictpro.mall.client.runtime.Device;
			
			
			[Bindable]
			public var view:VOEditor;
			
			override public function open(owner:DisplayObjectContainer, modal:Boolean=false):void
			{
				super.open(owner, modal);
				owner.addEventListener(ResizeEvent.RESIZE, handleResize);
			}
			
			override public function close(commit:Boolean=false, data:*=null):void
			{
				owner.removeEventListener(ResizeEvent.RESIZE, handleResize);
				super.close(commit, data);
			}
			
			
			protected function closeHandler(event:MouseEvent):void
			{
				this.close();
			}

			private function handleResize(event:ResizeEvent) : void
			{
				this.close();				
			}

			protected function skinnablepopupcontainer1_creationCompleteHandler(event:FlexEvent):void
			{
				closePopup.transform.colorTransform = Device.getDefaultColorTransform();
			}
			
			
			protected function skinnablepopupcontainer1_showHandler(event:FlexEvent):void
			{
				var unscaledWidth:int = Device.getUnScaledSize(owner.width); 
				var unscaledHeight:int = Device.getUnScaledSize(owner.height); 
				x= Device.getScaledSize(unscaledWidth-voeditor.width>15?(unscaledWidth-voeditor.width)/2-30:30);
				y=Device.getScaledSize(30);
				this.width = unscaledWidth - Device.getUnScaledSize(x)*2;
				this.height = unscaledHeight - Device.getUnScaledSize(y)*2;
				this.graphics.lineStyle(2,Device.getDefaultColor(),1);
				this.graphics.drawRect(0,0,this.width,this.height);
				disableControls(this);
			}
			
			private function disableControls(control:DisplayObjectContainer):void
			{
//				for(var i:int=0; i< control.numChildren; i++) {
//					var child : DisplayObject = control.getChildAt(i);
//					if(child  is TextInput) {
//						TextInput(child).editable = false;
//					} else if(child is DisplayObjectContainer) {
//						disableControls(DisplayObjectContainer(child));
//					}
//					
//				}
			}
			
			protected function skinnablepopupcontainer1_keyDownHandler(event:KeyboardEvent):void
			{
				if(event.keyCode == Keyboard.ESCAPE) {
					this.close();
				}
				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:layout>
		<s:VerticalLayout gap="5" paddingLeft="10" paddingTop="10" paddingBottom="10" paddingRight="10" />
	</s:layout>
	<s:Group height="10" width="100%">
		<s:Group width="10" height="10" right="0" top="0" bottom="0" click="closeHandler(event)" >
			<fxg:cancel id="closePopup" width="100%" height="100%" />
		</s:Group>
	</s:Group>
	<s:Scroller width="100%" height="100%" >
		
		<s:Group width="100%" height="100%" >
			<s:Group id="voeditor" horizontalCenter="0" verticalCenter="0" enabled="false" disabledAlpha="1">
				{[view]}
			</s:Group>
		</s:Group>
	</s:Scroller>
	
</s:SkinnablePopUpContainer>
