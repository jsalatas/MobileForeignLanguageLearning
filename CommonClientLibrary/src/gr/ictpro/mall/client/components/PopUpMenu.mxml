<?xml version="1.0" encoding="utf-8"?>
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
						   xmlns:s="gr.ictpro.mall.client.components.*"
						   xmlns:signals="org.osflash.signals.*"
						   width="100%" height="100%" initialize="init(event)"
						   addedToStage="addedToStageHandler(event)"
						   open="skinnablepopupcontainer1_openHandler(event)"
						   >
	<fx:Declarations>
		<signals:Signal id="itemSelected" valueClasses="{[Object]}"/>
		<signals:Signal id="popUpClosed"/>
	</fx:Declarations>	

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			import mx.events.ResizeEvent;
			
			import spark.events.PopUpEvent;
			
			import gr.ictpro.mall.client.components.renderers.PopupListRenderer;
			
			public var selected:Object;
			
			[Bindable]
			public var menuList:ArrayCollection;

			[Bindable]
			public var borderVisible:Boolean=false;
			
			[Bindable]
			public var labelFunction:Function; 
			
			protected function init(event:FlexEvent):void
			{
				this.addEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE, mouseDownOutside);
			}
			
			protected function mouseDownOutside(e:MouseEvent):void {
				this.close();
			}
			
			override public function close(commit:Boolean = false, data:* = undefined):void
			{
				stage.removeEventListener(Event.RESIZE, resizeHandler);
				popUpClosed.dispatch();
				super.close(commit, data);
			}
			
			override public function open(owner:DisplayObjectContainer, modal:Boolean=false):void
			{
				super.open(owner, modal);
				arrangeList();
			}
			
			
			protected function addedToStageHandler(event:Event):void
			{
				stage.addEventListener(Event.RESIZE, resizeHandler);
			}
			
			protected function resizeHandler(event:Event):void
			{
				this.close();
			}

			protected function arrangeList():void
			{
				if(this.y+list.height +100 > stage.height) {
					this.y = owner.localToGlobal(new Point(0, owner.y)).y -list.height; 
				}
			}
			
			protected function list_resizeHandler(event:ResizeEvent):void
			{
				arrangeList();
			}
			
			protected function list_keyUpHandler(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.SPACE) {
					itemSelected.dispatch(list.selectedItem);
					this.close();
				} else if (event.keyCode == Keyboard.ESCAPE) {
					this.close();
				}
			}
			
			protected function skinnablepopupcontainer1_openHandler(event:PopUpEvent):void
			{
				list.setFocus();
				
			}
			
			protected function list_clickHandler(event:MouseEvent):void
			{
				if(list.selectedItem !=null) {
					selected = list.selectedItem;
					itemSelected.dispatch(list.selectedItem);
					this.close();
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Group width="100%" height="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="0xFFFFFF"/></s:fill>
		</s:Rect>
		<s:List id="list" width="100%"  
				height="{(menuList.length&gt;5?5:menuList.length)*(new PopupListRenderer().definedHeight) +2}"
				borderAlpha="{borderVisible?1:0}" borderVisible="{borderVisible}" keyUp="list_keyUpHandler(event)"
				dataProvider="{menuList}" resize="list_resizeHandler(event)" click="list_clickHandler(event)"
				labelFunction="{labelFunction}"
				itemRenderer="gr.ictpro.mall.client.components.renderers.PopupListRenderer"/>
	</s:Group>
</s:SkinnablePopUpContainer>
