<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="gr.ictpro.mall.client.components.*"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  addedToStage="addedToStageHandler(event)" 
					  width="100%"
					  hasFocusableChildren="true"
					  implements="mx.managers.IFocusManagerComponent"
					  initialize="initializeHandler(event)" 	
					  focusIn="group1_focusInHandler(event)"
					  click="txt_clickHandler(event)"
					  >

	<fx:Metadata>
		[Event(name="change", type="flash.events.Event")]
		[DefaultProperty("txt")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.utils.ObjectProxy;
			
			import gr.ictpro.mall.client.model.Device;
			import gr.ictpro.mall.client.model.Translation;
			
			private var listClicked:Boolean = false;
			
			private var _selected:ObjectProxy = null;
			
			[Bindable]
			public function get selected():ObjectProxy
			{
				return this._selected;
			}
			
			public function set selected(selected:ObjectProxy):void
			{
				this._selected = new ObjectProxy(selected);
			}
			
			[Bindable]
			private var _dataList:ArrayList;
			
			private var _maxWidth:int;
			
//			[Bindable]
//			private var controlHeight:int=0;
//			
			[Bindable]
			public function set dataList(dataList:ArrayList):void {
				this._dataList = dataList;
				
				var format:TextFormat = new TextFormat();
				var popUpMenu:PopUpMenu = new PopUpMenu();
				format.font = popUpMenu.getStyle("font-family"); // since we're working with a css file for the styling
				format.size = popUpMenu.getStyle("font-size");
				var textField:TextField = new TextField();
				textField.defaultTextFormat = format;
				
				_maxWidth = 0;
				for each(var o:Object in dataList) {
					textField.text = o.text;
					if(_maxWidth < textField.textWidth) {
						_maxWidth = textField.textWidth;
					}
				}
				
			}
			
			public function get dataList():ArrayList {
				return this._dataList;
			}
			
			private function popUpAction(selected:ObjectProxy):void
			{
				this.selected = selected;
				dispatchEvent(new Event(Event.CHANGE));
			}
			
			protected function txt_clickHandler(event:MouseEvent):void
			{
				var popUpMenu:PopUpMenu = new PopUpMenu();
				popUpMenu.menuList = dataList;
				popUpMenu.borderVisible = true;
				var point:Point = localToGlobal(new Point(0, txt.height)); 
				var curDensity:Number = FlexGlobals.topLevelApplication.runtimeDPI; 
				var curAppDPI:Number = FlexGlobals.topLevelApplication.applicationDPI; 

				popUpMenu.x = point.x*curAppDPI/curDensity;
				popUpMenu.y = point.y*curAppDPI/curDensity;
				popUpMenu.width = _maxWidth < txt.definedWidth || _maxWidth > txt.definedWidth * 1.5 ? txt.definedWidth : _maxWidth;
				popUpMenu.percentHeight=100;
				popUpMenu.itemSelected.add(popUpAction);
				popUpMenu.open(this, false);
				popUpMenu.list.selectedItem = selected;
				popUpMenu.list.setFocus();
			}
			
			protected function initializeHandler(event:Event):void
			{
				if(selected == null) {
					txt.label=Translation.getTranslation("Select Item");
				}
//				controlHeight=height;
			}

			protected function addedToStageHandler(event:Event):void
			{
				if(this.height == 0) {
					this.height = 20;
				}
			}
			
			protected function group1_focusInHandler(event:FocusEvent):void
			{
				txt.setFocus();
				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
	</fx:Declarations>
	<s:Button skinClass="{Device.dropDownSkin}" id="txt" width="100%" label="{selected.text}"  />
	
</s:Group>
