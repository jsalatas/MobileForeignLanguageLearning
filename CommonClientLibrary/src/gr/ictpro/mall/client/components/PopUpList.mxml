<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="gr.ictpro.mall.client.components.*"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  addedToStage="addedToStageHandler(event)" 
					  width="100%" height="100%"
					  initialize="initializeHandler(event)"
					  >

	<fx:Metadata>
		[Event(name="change", type="flash.events.Event")]
		[DefaultProperty("txt")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import gr.ictpro.mall.client.runtime.Device;
			
			private var listClicked:Boolean = false;
			
			private var _selected:Object = null;
			
			[Bindable]
			public function get selected():Object
			{
				return this._selected;
			}
			
			public function set selected(selected:Object):void
			{
				this._selected = selected;
			}
			
			[Bindable]
			private var _dataList:ArrayCollection;
			
			private var popUpMenu:PopUpMenu;
		
			private var mouseDown:Boolean=false;
			
			[Bindable]
			public function set dataList(dataList:ArrayCollection):void {
				this._dataList = dataList;
			}
			
			public function get dataList():ArrayCollection {
				return this._dataList;
			}
			
			private function popUpAction(selected:Object):void
			{
				this.selected = selected;
				dispatchEvent(new Event(Event.CHANGE));
			}

			protected function txt_clickHandler(event:MouseEvent):void
			{
				if(popUpMenu && mouseDown) {
				} else {
				if(!popUpMenu) {
					popUpMenu = new PopUpMenu();
					popUpMenu.menuList = dataList;
					popUpMenu.borderVisible = true;
					popUpMenu.percentHeight=100;
					popUpMenu.itemSelected.add(popUpAction);
					popUpMenu.popUpClosed.add(popUpClosed);
					
				}
				var point:Point = localToGlobal(new Point(0, txt.height)); 
				var curDensity:Number = FlexGlobals.topLevelApplication.runtimeDPI; 
				var curAppDPI:Number = FlexGlobals.topLevelApplication.applicationDPI; 
				
				popUpMenu.x = point.x*curAppDPI/curDensity;
				popUpMenu.y = point.y*curAppDPI/curDensity;
				popUpMenu.minWidth = txt.width;
				popUpMenu.open(this, false);
				popUpMenu.list.selectedItem = selected;
				}
				mouseDown = false;

			}
			
			protected function popUpClosed():void
			{
				txt.setFocus();
			}
			
			protected function initializeHandler(event:Event):void
			{
				if(selected == null) {
					txt.label=Device.tranlations.getTranslation("Select Item");
				}
			}

			protected function addedToStageHandler(event:Event):void
			{
				if(this.height == 0) {
					this.height = 20;
				}
				txt.tabIndex = this.tabIndex;

			}
			
			protected function txt_mouseDownHandler(event:MouseEvent):void
			{
				if(popUpMenu && popUpMenu.isOpen) {
					mouseDown = true;
				}
				
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
	</fx:Declarations>
	<s:Button skinClass="{Device.dropDownSkin}" id="txt" top="0" left="0" right="0" bottom="0" 
			  label="{selected}" click="txt_clickHandler(event)" mouseDown="txt_mouseDownHandler(event)" />
	
</s:Group>
