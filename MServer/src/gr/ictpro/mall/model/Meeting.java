package gr.ictpro.mall.model;

// Generated Mar 10, 2016 8:58:08 PM by Hibernate Tools 4.0.0


import gr.ictpro.mall.authentication.AuthenticationMethod;
import gr.ictpro.mall.context.UserContext;
import gr.ictpro.mall.interceptors.ClientReferenceClass;
import gr.ictpro.mall.service.GenericService;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.springframework.context.ApplicationContext;
import org.springframework.flex.core.io.AmfIgnore;
import org.springframework.web.context.ContextLoader;

/**
 * Meeting generated by hbm2java
 */
@Entity
@Table(name = "meeting")
@ClientReferenceClass(className= {"gr.ictpro.mall.client.model.vo.Meeting", "gr.ictpro.mall.client.model.vo.Notification"})
public class Meeting implements java.io.Serializable {

    private Integer id;
    private User approvedBy;
    private User createdBy;
    private MeetingType meetingType;
    private String name;
    private String moderatorPassword;
    private String userPassword;
    private Date time;
    private Date created;
    private boolean approve;
    private boolean record;
    private boolean parentsCanSeeRecording;
    private Set<MeetingUser> meetingUsers = new HashSet<MeetingUser>(0);
    private Set<User> pendingUsers = new HashSet<User>(0);
    private String status;

    public Meeting() {
    }

    public Meeting(MeetingType meetingType, String name, String moderatorPassword, String userPassword, Date time, User createdBy, boolean record, boolean parentsCanSeeRecording) {
	this.meetingType = meetingType;
	this.name = name;
	this.moderatorPassword = moderatorPassword;
	this.userPassword = userPassword;
	this.time = time;
	this.createdBy = createdBy;
	this.record = record;
    }

    public Meeting(User approvedBy, MeetingType meetingType, String name, String moderatorPassword, String userPassword, Date time, Date created,
	    Set<MeetingUser> meetingUsers, User createdBy, boolean record, boolean parentsCanSeeRecording) {
	this.approvedBy = approvedBy;
	this.meetingType = meetingType;
	this.name = name;
	this.moderatorPassword = moderatorPassword;
	this.userPassword = userPassword;
	this.time = time;
	this.meetingUsers = meetingUsers;
	this.createdBy = createdBy;
	this.record = record;
	this.created = created;
	this.parentsCanSeeRecording = parentsCanSeeRecording;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
	return this.id;
    }

    public void setId(Integer id) {
	this.id = id;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "approved_by")
    public User getApprovedBy() {
	return this.approvedBy;
    }

    public void setApprovedBy(User approvedBy) {
	this.approvedBy = approvedBy;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "meeting_type_id", nullable = false)
    public MeetingType getMeetingType() {
	return this.meetingType;
    }

    public void setMeetingType(MeetingType meetingType) {
	this.meetingType = meetingType;
    }

    @Column(name = "name", nullable = false, length = 255)
    public String getName() {
	return this.name;
    }

    public void setName(String name) {
	this.name = name;
    }

    @AmfIgnore
    @Column(name = "moderator_password", nullable = false, length = 45)
    public String getModeratorPassword() {
	return this.moderatorPassword;
    }

    @AmfIgnore
    public void setModeratorPassword(String moderatorPassword) {
	this.moderatorPassword = moderatorPassword;
    }

    @AmfIgnore
    @Column(name = "user_password", nullable = false, length = 45)
    public String getUserPassword() {
	return this.userPassword;
    }

    @AmfIgnore
    public void setUserPassword(String userPassword) {
	this.userPassword = userPassword;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "time", nullable = false, length = 19)
    public Date getTime() {
	return this.time;
    }

    public void setTime(Date time) {
	this.time = time;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created", length = 19)
    public Date getCreated() {
	return this.created;
    }

    public void setCreated(Date created) {
	this.created = created;
    }


    @OneToMany(fetch = FetchType.LAZY, mappedBy = "meeting")
    @AmfIgnore
    public Set<MeetingUser> getMeetingUsers() {
	return this.meetingUsers;
    }

    @AmfIgnore
    public void setMeetingUsers(Set<MeetingUser> meetingUsers) {
	this.meetingUsers = meetingUsers;
    }

    @Column(name = "parents_can_see_recording", nullable = false, columnDefinition= "BIT(1) DEFAULT 0")
    public boolean isParentsCanSeeRecording() {
	return this.parentsCanSeeRecording;
    }

    public void setParentsCanSeeRecording(boolean parentsCanSeeRecording) {
	this.parentsCanSeeRecording = parentsCanSeeRecording;
    }

    @Column(name = "record", nullable = false, columnDefinition= "BIT(1) DEFAULT 0")
    public boolean isRecord() {
	return this.record;
    }

    public void setRecord(boolean record) {
	this.record = record;
    }



    @Transient
    public Set<User> getUsers() {
	if(this.pendingUsers != null && this.pendingUsers.size()>0) {
	    return pendingUsers;
	}
	
	Set<User> res = new HashSet<User>();
	for(MeetingUser mu: meetingUsers) {
	    res.add(mu.getUser());
	}
	
	
	return res;
    }
    
    @Transient
    public void setUsers(Set<User> users) {
	pendingUsers = users;
    }

    @Transient
    public boolean isApprove() {
        return approve || approvedBy != null;
    }

    @Transient
    public void setApprove(boolean approve) {
        this.approve = approve;
    }
    
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "created_by", nullable = false)
    public User getCreatedBy() {
	return this.createdBy;
    }

    public void setCreatedBy(User createdBy) {
	this.createdBy = createdBy;
    }

    @Transient
    public String getStatus() {
        return status;
    }

    @Transient
    public void setStatus(String status) {
        this.status = status;
    }

    @Transient
    @AmfIgnore
    public void setCurrentUserIsApproved(boolean currentUserIsApproved) {
	//dummy
    }

    @Transient
    @AmfIgnore
    public boolean hasTeacher() {
	boolean res = false;
	if (createdBy.hasRole("Teacher")) {
	    res = true;
	} else {
	    for (MeetingUser mu : meetingUsers) {
		if (mu.getUser().hasRole("Teacher")) {
		    res = true;
		    break;
		}
	    }
	}
	
	return res;
    }
    
    @SuppressWarnings("unchecked")
    @Transient
    public boolean isCurrentUserIsApproved() {
	ApplicationContext ctx = ContextLoader.getCurrentWebApplicationContext();  
	GenericService<Config, Integer> configService = (GenericService<Config, Integer>) ctx.getBean("configService");
	Boolean globalAllowUnattended = Boolean.parseBoolean(configService.listByProperty("name", "allow_unattended_meetings").get(0).getValue());
	
	UserContext userContext = (UserContext) ctx.getBean("userContext");
	User currentUser = userContext.getCurrentUser();
	
	Boolean approvedByTeacherOrAdmin = approvedBy != null; 
	
	boolean meetingHasTeacher = false;
	boolean userIsApproved = false;
	if (createdBy.hasRole("Teacher")) {
	    meetingHasTeacher = true;
	} else {
	    for (MeetingUser mu : meetingUsers) {
		if (mu.getUser().hasRole("Teacher")) {
		    meetingHasTeacher = true;
		    break;
		} else if (mu.getUser().getId().intValue() == currentUser.getId().intValue()) {
		    userIsApproved = !mu.getUser().isDisallowUnattendedMeetings() && mu.getApprovedBy() != null;
		} else if(currentUser.hasRole("Parent")) {
		    for(User child:currentUser.getChildren()) {
			if (mu.getUser().getId().intValue() == child.getId().intValue()) {
			    userIsApproved = !mu.getUser().isDisallowUnattendedMeetings() && mu.getApprovedBy() != null;
			}
		    }
		}
	    }
	}

	return meetingHasTeacher || approvedByTeacherOrAdmin || (globalAllowUnattended && userIsApproved);
    }

    
}
