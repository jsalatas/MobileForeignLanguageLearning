package gr.ictpro.mall.model.hibernate;

// Generated Aug 31, 2015 8:17:23 PM by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Role generated by hbm2java
 */
@Entity
@Table(name = "role"
	, uniqueConstraints = @UniqueConstraint(columnNames = "role"))
public class Role implements java.io.Serializable {

    private Integer id;
    private String role;
    private Set<User> users = new HashSet<User>(0);
    private Set<RoleNotification> roleNotifications = new HashSet<RoleNotification>(0);

    public Role() {
    }

    public Role(String role) {
	this.role = role;
    }

    public Role(String role, Set<User> users, Set<RoleNotification> roleNotifications) {
	this.role = role;
	this.users = users;
	this.roleNotifications = roleNotifications;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
	return this.id;
    }

    public void setId(Integer id) {
	this.id = id;
    }

    @Column(name = "role", unique = true, nullable = false, length = 45)
    public String getRole() {
	return this.role;
    }

    public void setRole(String role) {
	this.role = role;
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "user_role", joinColumns = {
	    @JoinColumn(name = "role_id", nullable = false, updatable = false) }, inverseJoinColumns = {
	    @JoinColumn(name = "user_id", nullable = false, updatable = false) })
    public Set<User> getUsers() {
	return this.users;
    }

    public void setUsers(Set<User> users) {
	this.users = users;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "role")
    public Set<RoleNotification> getRoleNotifications() {
	return this.roleNotifications;
    }

    public void setRoleNotifications(Set<RoleNotification> roleNotifications) {
	this.roleNotifications = roleNotifications;
    }

}
