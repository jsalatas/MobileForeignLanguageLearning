package gr.ictpro.mall.model;

// Generated Jan 31, 2016 7:54:21 PM by Hibernate Tools 4.0.0

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Transient;

import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.springframework.flex.core.io.AmfIgnore;

/**
 * WifiTag generated by hbm2java
 */
@Entity
@Table(name = "wifi_tag")
public class WifiTag implements java.io.Serializable {

    /**
     * 
     */
    private static final long serialVersionUID = -8157013108857658652L;
    
    private Integer id;
    private Location location;
    private String ssid;
    private double rssi;

    public WifiTag() {
    }

    public WifiTag(Location location, String ssid, double rssi) {
	this.location = location;
	this.ssid = ssid;
	this.rssi = rssi;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
	return this.id;
    }

    public void setId(Integer id) {
	this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "location_id", nullable = false)
    public Location getLocation() {
	return this.location;
    }

    public void setLocation(Location location) {
	this.location = location;
    }

    @Column(name = "ssid", nullable = false, length = 100)
    public String getSsid() {
	return this.ssid;
    }

    public void setSsid(String ssid) {
	this.ssid = ssid;
    }

    @Column(name = "rssi", nullable = false, precision = 22, scale = 0)
    public double getRssi() {
	return this.rssi;
    }

    public void setRssi(double rssi) {
	this.rssi = rssi;
    }

    @AmfIgnore
    @Transient
    public double getSignalClassification() {
	double signalClassificication;
	if(rssi == -1000) {
	    signalClassificication = 0.0;
	} else if(rssi <= -85) {
	    signalClassificication = 0.7;
	} else if(rssi <= -70) {
	    signalClassificication = 0.8;
	} else if(rssi <= -55) {
	    signalClassificication = 0.9;
	} else {
	    //if(rssi > -55) 
	    signalClassificication = 1;
	}

	return signalClassificication;
    }

    @Override
    public int hashCode() {
	final int prime = 31;
	int result = 1;
	long temp;
	temp = Double.doubleToLongBits(rssi);
	result = prime * result + (int) (temp ^ (temp >>> 32));
	return result;
    }

    @Override
    public boolean equals(Object obj) {
	if (this == obj)
	    return true;
	if (obj == null)
	    return false;
	if (getClass() != obj.getClass())
	    return false;
	WifiTag other = (WifiTag) obj;
	if (Double.doubleToLongBits(rssi) != Double.doubleToLongBits(other.rssi))
	    return false;
	return true;
    }
   
}
